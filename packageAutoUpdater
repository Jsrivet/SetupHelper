#!/bin/bash

# This script keeps Venus modification packages up to date
# It looks on GitHub for package updates
# The timestamp of the current tag on GitHub is compatred to the one that was last installed
# if GitHub is newer, the local copy is updated and the package is reinstalled
#
# This script also checks for updates on a USB stick and gives priority to that location
#
# An automatic update will only occur if the package is installed and the autoUpdate setup option is set
#
# the script runs as a service so any updates that also update this script will restart automatically

# get the full, unambiguous path to this script
scriptDir="$( cd "$(dirname $0)" >/dev/null 2>&1 ; /bin/pwd -P )"
packageame=$(basename "$scriptDir")
shortScriptName=$(basename "$scriptDir")/$(basename "$0")

source "/data/SetupHelper/LogHandler"

# this flag is tested by LogHandler to determine if messages should be output to the console
logToConsole=false

source "/data/SetupHelper/UpdateResources"

# set dbus setting
# $1 is new value
# $2 is the dbus path
setSetting ()
{
    local newValue="$1"
    local dbusPath="$2"
    dbus -y com.victronenergy.settings $dbusPath SetValue "$newValue" > /dev/null
}

# updates status message on GUI
# $1 is the message identifier (not the actual message

lastMessage=''
lastPackage=''

updateStatus ()
{
    updateDbus=false
    checkPackage=false
    if [[ $1 == 'IDLE' ]] ; then
        message="Fast updates: 10 sec/pkg, Normal updates: 10 min/pkg"
    elif [[ $1 == 'USB_DISABLED' ]] ; then
        message="USB/SD updates disabled auto GitHub updates"
    elif [[ $1 == 'CHECKING' ]] ; then
        message="checking $package"
        checkPackage=true
    elif [[ $1 == 'WAIT' ]] ; then
        message="waiting to check $package"
        checkPackage=true
    elif [[ $1 == 'USB_CHECK' ]] ; then
        message="Checking USB/SD for updates"
    else
        message=""
    fi
    if [[ $1 != $lastMessage ]]; then
        updateDbus=true
    elif $checkPackage && [[ $package != $lastPackage ]]; then
        updateDbus=true
    fi
    # update GUI status message
    if $updateDbus ; then
        setSetting "$message" /Settings/GuiMods/CheckingPackage
    fi
    lastMessage=$1
    lastPackage=$package
}


#### main code starts here

logMessage "starting up"

usbCheck=false
mediaDetected=false
lastUpdateTime=0
checkingPackage=false
updateSetupHelper=false


# 10 minutes between GitHub checks to minimize network traffic
gitHubSlowCheckDelay=600
# 10 seconds for first pass
gitHubFastCheckDelay=10
gitHubCheckDelay=0

lastGitHubUpdateSetting=0


# loop forever
while true ; do
    rebootNeeded=false

    # loop through packages, but don't look at new package until it's been checked for an update
    # this loop will run every second even if waiting to access GitHub again
    # this permits detection of USB media during the long wait for the next GitHub check
    pkgArray=($allPackages)
    i=0
    while (( i < ${#pkgArray[@]} )); do
        # look for installed package
        if ! $checkingPackage ; then
            package=${pkgArray[i]}
            packageDir="/data/$package"
            setupOptionsDir="$setupOptionsRoot"/$package
            if [ ! -f "$setupOptionsDir/optionsSet" ]; then
                (( i++ ))
                continue
            # package has been installed, continue
            else
                checkingPackage=true
            fi
        fi

        doUpdate=false

        # pull Git Hub autoupdate mode from dbus
        autoUpdateSetting=$(dbus-send --system --print-reply=literal --dest=com.victronenergy.settings /Settings/GuiMods/GitHubAutoUpdate\
                com.victronenergy.BusItem.GetValue 2> /dev/null | awk '{print $3}')
        if [ -z $autoUpdateSetting ]; then
            autoUpdateSetting=0
        fi

        # check for USB / SD media
        mediaList=($(ls /media))
        # no media
        if [ -z $mediaList ] ; then
            mediaDetected=false
            usbCheck=false
        # media first detected, start loop over and enable USB checks
        elif ! $mediaDetected ; then
            mediaDetected=true
            usbCheck=true
            updateStatus 'USB_CHECK'
            i=0
            continue
        fi

        # nothing to do - reset loop and wait
        if (( $autoUpdateSetting == 0 )) && ! $usbCheck ; then
            i=0
            checkingPackage=false
            updateStatus 'IDLE'
            sleep 1
            continue
        fi

        if $checkingPackage ; then
            # USB / SD updates
            if $usbCheck ; then
                for dir in ${mediaList[@]} ; do
                    getFromUsb $package
                    if [ $? -eq 1 ]; then
                        logMessage "found $package on USB"
                        doUpdate=true
                        updateStatus 'CHECKING'
                        break;
                    fi
                done
                # done checking for this package, time to move on
                checkingPackage=false
                    
            # Git Hub updates
            elif (( $autoUpdateSetting != 0 )); then
                # if speeding up the loop, start package scan over
                if (( $autoUpdateSetting >= 2 )) && (( $lastGitHubUpdateSetting <= 1 )); then
                    checkingPackage=false
                    lastGitHubUpdateSetting=$autoUpdateSetting
                    i=0
                    continue
                fi

                # set update delay based on update mode 
                if (( $autoUpdateSetting >= 2 )) ; then
                    gitHubCheckDelay=$gitHubFastCheckDelay
                else
                    gitHubCheckDelay=$gitHubSlowCheckDelay
                fi

                currentTime=$(date '+%s')              
                # wait between GitHub updates to minimize traffic
                if (( $currentTime >= $lastUpdateTime + $gitHubCheckDelay )) ; then
                    updateStatus 'CHECKING'
                    lastUpdateTime=$currentTime
                    getFromGitHub $package
                    if [ $? -eq 1 ]; then
                        logMessage "found $package on GitHub"
                        doUpdate=true
                    fi
                    checkingPackage=false
                elif (( $autoUpdateSetting != 0 )); then
                    updateStatus 'WAIT'
                fi
            fi
            if $doUpdate ; then
                # do SetupHelper update now since other setup scripts depend on it's resources
                # will end this script which will start up again via supervise
                if [ $package == "SetupHelper" ]; then
                    updateSetupHelper=true
                    break
                # reinstall the package without user interaction
                else
                    # update via unattended reinstall only
                    logMessage "updating $package"
                    doUpdate $package
                    if $usbCheck ; then
                        sleep 1
                    fi
                fi
            elif (( $autoUpdateSetting == 0 )); then
                rm -rf "$packageDir-$gitHubBranch"
            fi
        fi # end if checkingPackage
        # go to next package if done with this one
        if ! $checkingPackage ; then
            (( i++ ))
        fi
        if $usbCheck ; then
            usleep 200000
        else
            sleep 1
        fi
    done

    # single pass
    if (( $autoUpdateSetting == 3 )) ; then
        setSetting 0 /Settings/GuiMods/GitHubAutoUpdate
    # end of first pass, switch to slow updates
    elif (( $autoUpdateSetting == 2 )) ; then
        setSetting 1 /Settings/GuiMods/GitHubAutoUpdate
    fi
    usbCheck=false

    # continue execution in packageAutoUpdateCleanup
    # so that this script and the service can exit cleanly
    if $updateSetupHelper || $rebootNeeded ; then
        logMessage "continuing in cleanup script - $packageName exiting"
        
        nohup "$scriptDir/packageAutoUpdaterCleanup" $updateSetupHelper $rebootNeeded 2>&1 | awk '{print "packageAutoUpdater " $0}'| tai64n >> /var/log/SetupHelper &
        
        # shutdown the service which runs this script - this will end this script
        svc -d "/service/SetupHelper"

        # wait here for service to end the script
        sleep 10000
    fi

    sleep 1
done
