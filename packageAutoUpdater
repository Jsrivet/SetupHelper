#!/bin/bash

# This script keeps Venus modification packages up to date
# It looks on GitHub for package updates
# The timestamp of the current tag on GitHub is compatred to the one that was last installed
# if GitHub is newer, the local copy is updated and the package is reinstalled
#
# This script also checks for updates on a USB stick and gives priority to that location
#
# An automatic update will only occur if the package is installed and the autoUpdate setup option is set
#
# the script runs as a service so any updates that also update this script will restart automatically

# get the full, unambiguous path to this script
scriptDir="$( cd "$(dirname $0)" >/dev/null 2>&1 ; /bin/pwd -P )"
packageame=$(basename "$scriptDir")
shortScriptName=$(basename "$scriptDir")/$(basename "$0")

source "/data/SetupHelper/LogHandler"

# this flag is tested by LogHandler to determine if messages should be output to the console
logToConsole=false

source "/data/SetupHelper/UpdateResources"

# set dbus setting
# $1 is new value
# $2 is the dbus path
setSetting ()
{
    local newValue=$1
    local dbusPath=$2
    if [ ! -z $newValue ]; then
        dbus -y com.victronenergy.settings $dbusPath SetValue $newValue > /dev/null
    fi
}

#### main code starts here

logMessage "starting up"

checkUSB=true
lastUpdateTime=0
checkingPackage=false
updateSetupHelper=false

# 10 minutes between GitHub checks to minimize network traffic
gitHubSlowCheckDelay=600
# 30 seconds for first pass
gitHubCheckDelay=30

# loop forever
while true ; do
    rebootNeeded=false
    updatedFromUsb=false

    # loop through packages, but don't look at new package until time has expired
    # this loop will run every 5 seconds even if waiting to access GitHub again
    # this permits detection of USB media during the long wait for the next GitHub check
    i=0
    pkgArray=($allPackages)
    while (( i < ${#pkgArray[@]} )); do
        doUpdate=false
        # look for new package
        if ! $checkingPackage ; then
            package=${pkgArray[i]}
            packageDir="/data/$package"
            setupOptionsDir="$setupOptionsRoot"/$package
            # package has been installed, look for it's archives
            if [ -f "$setupOptionsDir/optionsSet" ]; then
                checkingPackage=true
            fi
        fi
        # if no removable media is present allow usbUpdates to occur next time there is
        # this prevents repeated processing of same files
        mediaList=($(ls /media))
        if [ -z $mediaList ] ; then
            checkUSB=true
        fi
        if $checkingPackage ; then
            autoUpdateSetting=$(dbus-send --system --print-reply=literal --dest=com.victronenergy.settings /Settings/GuiMods/GitHubAutoUpdate\
                    com.victronenergy.BusItem.GetValue 2> /dev/null | awk '{print $3}')
            # media found, look for package archives
            if $checkUSB && [ ! -z $mediaList ]; then
                for dir in ${mediaList[@]} ; do
                    getFromUsb $package
                    if [ $? -eq 1 ]; then
                        logMessage "found $package on USB"
                        updatedFromUsb=true
                        doUpdate=true
                        checkingPackage=false
                        if [ ! -z $autoUpdateSetting ] && (( $autoUpdateSetting == 1 )); then
                            logMessage "USB update disables GitHub updates - must be reenabled manually !!"
                            setSetting 0 /Settings/GuiMods/GitHubAutoUpdate
                            autoUpdateSetting=0
                        fi
                        break;
                    fi
                done
            fi
            if [ ! -z $autoUpdateSetting ] && (( $autoUpdateSetting == 1 )); then
                currentTime=$(date '+%s')
                # wait between GitHub updates to minimize traffic
                if (( $currentTime >= $lastUpdateTime + $gitHubCheckDelay )) ; then
                    lastUpdateTime=$currentTime
                    getFromGitHub $package
                    if [ $? -eq 1 ]; then
                        logMessage "found $package on GitHub"
                        doUpdate=true
                    fi
                    checkingPackage=false
                fi
            fi
            if $doUpdate ; then
                # do SetupHelper update now since other setup scripts depend on it's resources
                # will end this script which will start up again via supervise
                if [ $package == "SetupHelper" ]; then
                    updateSetupHelper=true
                    break
                # reinstall the package without user interactionl
                else
                    # update via unattended reinstall only
                    logMessage "updating $package"
                    doUpdate $package
                fi
            elif [ -f "$setupOptionsRoot/SetupHelper/autoGitHubUpdate" ]; then
                rm -rf "$packageDir-$gitHubBranch"
            fi
        fi
        # current package was checked - move on to the next one
        # if checking was deferred, say on this package
        if ! $checkingPackage ; then
            ((i++))
        fi
        sleep 1
    done

    # prevent further USB updates until media is removed and reinserted
    if $updatedFromUsb ; then
        checkUSB=false
    fi

    # continue execution in packageAutoUpdateCleanup
    # so that this script and the service can exit cleanly
    if $updateSetupHelper || $rebootNeeded ; then
        logMessage "continuing in cleanup script - $packageName exiting"
        
        nohup "$scriptDir/packageAutoUpdaterCleanup" $updateSetupHelper $rebootNeeded 2>&1 | awk '{print "packageAutoUpdater " $0}'| tai64n >> /var/log/SetupHelper &
        
        # shutdown the service which runs this script - this will end this script
        svc -d "/service/SetupHelper"

        # wait here for service to end the script
        sleep 10000
    fi

    gitHubCheckDelay=$gitHubSlowCheckDelay
done
