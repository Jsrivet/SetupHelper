
# This file provides utilities for automatic and manual package updates/installation
#
# Include the following lines in the update scripts
# source "/data/SetupHelper/LogHandler"
# source "/data/SetupHelper/UpdateResources"

setupHelperDir="/data/SetupHelper"
source "$setupHelperDir/EssentialResources"

# converts a Venus version string to a version number
#
# beta numbers are handled in a special way. 
# the released verison has no beta string
#  it's number would be less than a beta version
#  we bump the version number by 999
#  so the release is always greater than any beta
#
# the "-large-n" portion is discarded so those versions
# can be compared to non-large versions
#
# the version string is passed as $1
# the number is returned in versionNumber

function versionStringToNumber ()
{
    local versionBeta=""

    read versionNumber versionBeta <<< $(echo $1 | sed -e 's/v//' -e 's/-.*$//' | \
                awk -v FS='[v.~-]' '{printf "%d%03d%03d %d\n", $1, $2, $3, $3}')
    if (( $versionBeta == 0 )); then
        ((versionNumber += 999))
    fi
}

# the version number of the archive is compared to the installed version
# if a the branch specifies a spcific version number, the two versions must match
# for the installed package to be considered up to date
# for a branch label, the installed package is up to date if it's version
# is equal to or greater than the archive's verison
#
# function will return 1 if an update is required and 0 if no update is needed

function checkVersions ()
{
    # convert versions to numbers and compare them
    versionStringToNumber $archiveVersion
    archiveVersionNumber=$versionNumber
    versionStringToNumber $installedVersion
    # if version number specified, must match that exact value
    if [[ ${gitHubBranch:0:1} == "v" ]] ; then
        if (( $versionNumber == $archiveVersionNumber )); then
            return 0
        else
            return 1
        fi
    else
        if (( $versionNumber >= $archiveVersionNumber )); then
            return 0
        else
            return 1
        fi
    fi
    
}


# get the package from a USB file
# The package is left in $package-$gitHubBranch for processing later
# $1 is the name of the package
# returns 0 if updates should NOT occur or 1 if update is acceptable for update

getFromUsb ()
{
    local package=$1
    local packageArchive
    local packageDir="/data/$package"
    local lastUpdate=""
    local fileSuffix

    # the unpacked folder for version tags don't inclue the v (e.g, v2.4 is 2.4 in archive name)
    # so the gitHubBranch is reworked to create a file suffix
    if [[ ${gitHubBranch:0:1} == "v" ]]; then
        fileSuffix=${gitHubBranch:1:999}
    else
        fileSuffix=$gitHubBranch
    fi
    packageArchive="/media/$dir/$package"-$fileSuffix.tar.gz

    # archive not found on USB stick
    if [ ! -f "$packageArchive" ]; then
        return 0
    fi

    tar -xzf "$packageArchive" -C /data
    if [ ! -d "$packageDir-$fileSuffix" ]; then
        logMessage "ERROR: $packageArchive did not contain $package"
        return 0
    fi

    # get the version from local copy of package
    if [ -f "$packageDir/version" ]; then
        installedVersion=$(cat "$packageDir/version")
    else
        installedVersion=""
    fi
    
    # get archive version
    archiveVersion=$(cat "/data/$package-$fileSuffix/version")
    if [ ! -e "$packageDir" ]; then
        if $logToConsole ; then
            echo "$package not yet installed - proceeding"
        fi
        return 1
    elif [ -z $archiveVersion ]; then
        logMessage "ERROR: No version in $package archive - can't update"
        return 0
    elif [ -z $installedVersion ]; then
        logMessage "WARNING: no version for $package current installation - proceeding"
        return 1
    else
        checkVersions
        if [ $? -eq 0 ]; then
            if $logToConsole ; then
                echo "$package is up to date"
            fi
            return 0
        else
            return 1
        fi
    fi
}


# get the package from a GitHub
# The package is left in $package-$gitHubBranch for processing later
# $1 is the name of the package
#
# $2 is a boolean: when true archive download is skipped
#   used by packageInstaller when a package is aready installed and auto updates are enabled
#  if auto updates are enabled and update will be skipped anyway
# returns 0 if update should NOT occur or 1 if update is acceptable

getFromGitHub ()
{
    local package=$1
    local packageDir="/data/$package"
    local lastUpdate=""
    local skipDownload
    if [ $# -gt 1 ] &&  $2 ; then
        checkOnly=true
    else
        checkOnly=false
    fi
    
    # get the version from local copy of package
    if [ -f "$packageDir/version" ]; then
        installedVersion=$(cat "$packageDir/version")
    else
        installedVersion=""
    fi
 
    if [ ! -e "$packageDir" ]; then
        if $logToConsole ; then
            echo "$package not yet installed - proceeding"
        fi
    fi

    # fetch archive version
    archiveVersion=$(wget -qO - https://raw.githubusercontent.com/$gitHubUser/$package/$gitHubBranch/version)
    if [ -z $archiveVersion ]; then
        logMessage "ERROR: no version for $package $gitHubUser $gitHubBranch on GitHub - can't continue"
        return 0
    elif [ -z $installedVersion ]; then
        logMessage "WARNING: no version for $package current installation - proceeding"
    else
        checkVersions
        if [ $? -eq 0 ]; then
            if $logToConsole ; then
                echo "$package is up to date"
            fi
            return 0
        elif $checkOnly ; then
            return 1
        fi
    fi
    # update the package and reinstall it
    wget -qO - https://github.com/$gitHubUser/$package/archive/$gitHubBranch.tar.gz | tar -xzf - -C /data
    if [ $? -eq 0 ]; then
        return 1
    else
        logMessage "ERROR: can't access $package $gitHubUser $gitHubBranch on GitHub"
        return 0
    fi
}


# install the archive and run setup script
#
# $1 is the package name
# $2 is the github branch/version tag
# $3 is the flag to allow running the script with user interaction

doUpdate ()
{
    local package=$1
    local packageDir="/data/$package"
    local gitHubBranch=$2
    local fileSuffix

    # the unpacked folder for version tags don't inclue the v (e.g, v2.4 is 2.4 in archive name)
    if [[ ${gitHubBranch:0:1} == "v" ]]; then
        fileSuffix=${gitHubBranch:1:999}
    else
        fileSuffix=$gitHubBranch
    fi

    if [ $# -gt 2 ] && [ $3 == 'prompting' ]; then
        installOk=true
    else
        installOk=false
    fi
    
    # move new version into active position
    if [ -d "$packageDir-$fileSuffix" ]; then
        rm -rf "$packageDir"
        mv "$packageDir-$fileSuffix" "$packageDir"
    else
        logMessage "$packageDir-$fileSuffix is missing - can't continue"
        return
    fi

    if [ -f "$packageDir/setup" ]; then
        # if package is installed, reinstall automatically
        if [ -f "$installedFlagPrefix$package" ]; then
            logMessage "reinstalling $package"
            "$packageDir/setup" "reinstall" "force"
            # defer reboot until all updates and reinstalls have been done
            if [ $? == $exitReboot ] ; then
                rebootNeeded=true
            fi
        # no options set, run manual setup - but defer reboot until all scripts have been run
        elif $installOk ; then
            logMessage "running $package setup script - choose install to complete installation"
            "$packageDir/setup" "deferReboot"
            if [ $? == $exitReboot ] ; then
                rebootNeeded=true
            fi
        else
            logMessage "$package not currently active - skipping reinstall"
        fi
    fi
}
