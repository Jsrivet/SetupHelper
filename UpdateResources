
# This file provides utilities for automatic and manual package updates/installation
#
# Include the following lines in the update scripts
# source "/data/SetupHelper/LogHandler"
# source "/data/SetupHelper/UpdateResources"

# SetupHelper must be first so it updates resources used by other packages before they are updated
allPackages="SetupHelper GuiMods GeneratorConnector RpiDisplaySetup RpiGpioSetup TankRepeater"

gitHubUser="kwindrem"
gitHubBranch="current"

# directory that holds script's options
setupOptionsRoot="/data/setupOptions"

exitReboot=123

# get the package from a USB file
# The package is left in $package-$gitHubBranch for processing later
# $1 is the name of the package
# returns 0 if updated should NOT occur or 1 if update is acceptable for update

getFromUsb ()
{
    local package=$1
    local packageArchive="/media/$dir/$package"-$gitHubBranch.tar.gz
    local packageDir="/data/$package"
    local archiveTimeStamp=""
    local lastUpdate=""

    # no archive found on USB stick - process it
    if [ ! -f "$packageArchive" ]; then
        return 0
    fi

    tar -xzf "$packageArchive" -C /data
    if [ ! -d "$packageDir-$gitHubBranch" ]; then
        logMessage "ERROR: $packageArchive did not contain $package"
        return 0
    fi

    # get the timeStamp from local copy of package
    if [ -f "$packageDir/timeStamp" ]; then
        lastUpdate=$(cat "$packageDir/timeStamp")
    else
        lastUpdate=""
    fi
    
    # get archive timeStamp
    archiveTimeStamp=$(cat "/data/$package-$gitHubBranch/timeStamp")
    if [ ! -e "$packageDir" ]; then
        if $logToConsole ; then
            echo "$package not yet installed"
        fi
        return 1
    elif [ -z $archiveTimeStamp ]; then
        logMessage "ERROR: No timestamp in $package archive - can't update"
        return 0
    elif [ -z $lastUpdate ]; then
        logMessage "WARNING: no timestamp for $package current installation - proceeding"
        return 1
    elif (( $lastUpdate >= $archiveTimeStamp )); then
        if $logToConsole ; then
            echo "$package is up to date"
        fi
        return 0
    # archive is newer
    else
        return 1
    fi
}


# get the package from a GitHub
# The package is left in $package-$gitHubBranch for processing later
# $1 is the name of the package
# returns 0 if updated should NOT occur or 1 if update is acceptable for update

getFromGitHub ()
{
    local package=$1
    local packageDir="/data/$package"
    local archiveTimeStamp=""
    local lastUpdate=""
    # get the timeStamp from local copy of package
    if [ -f "$packageDir/timeStamp" ]; then
        lastUpdate=$(cat "$packageDir/timeStamp")
    else
        lastUpdate=""
    fi
    
    # fetch archive timeStamp
    archiveTimeStamp=$(wget -qO - https://raw.githubusercontent.com/$gitHubUser/$package/$gitHubBranch/timeStamp)
    if [ ! -e "$packageDir" ]; then
        if $logToConsole ; then
            echo "$package not yet installed"
        fi
    elif [ -z $archiveTimeStamp ]; then
        logMessage "ERROR: Can't access GitHub archive or no timestamp for $package - can't update"
        return 0
    elif [ -z $lastUpdate ]; then
        logMessage "WARNING: no timestamp for $package current installation - proceeding"
    elif (( $lastUpdate >= $archiveTimeStamp )); then
        if $logToConsole ; then
            echo "$package is up to date"
        fi
        return 0
    fi
    # update the package and reinstall it
    wget -qO - https://github.com/$gitHubUser/$package/archive/$gitHubBranch.tar.gz | tar -xzf - -C /data
    if [ ! -d "$packageDir-$gitHubBranch" ]; then
        logMessage "ERROR: $packageArchive did not contain $package"
        return 0
    else
        return 1
    fi
}


# install the archive and run setup script
#
# backup the last 2 versions in case
# it is necessary to revert to a previous verion
#
# $1 is the package name
# $2 is the flag to allow running the script with user interaction

doUpdate ()
{
    local package=$1
    local packageDir="/data/$package"

    if [ $# -gt 1 ] && [ $2 == 'prompting' ]; then
        installOk=true
    else
        installOk=false
    fi
    
    # backup last 2 versions
    if [ -d "$packageDir-backup2" ]; then
        rm -rf "$packageDir-backup2"
    fi
    if [ -d "$packageDir-backup1" ]; then
        mv "$packageDir-backup1" "$packageDir-backup2"
    fi
    if [ -d "$packageDir" ]; then
        mv "$packageDir" "$package-backup1" 
    fi
    # move new version into active position
    mv "$packageDir-$gitHubBranch" "$packageDir"

    if [ -f "$packageDir/setup" ]; then
        # if options have been set previously, reinstall automatically
        if [ -f "$setupOptionsRoot/$package/optionsSet" ]; then
            logMessage "reinstalling $package"
            "$packageDir/setup" "reinstall" "force"
            # defer reboot until all updates and reinstalls have been done
            if [ $? == $exitReboot ] ; then
                rebootNeeded=true
            fi
        # no options set, run manual setup - but defer reboot until all scripts have been run
        elif $installOk ; then
            logMessage "running $package setup script - choose install to complete installation"
            "$packageDir/setup" "deferReboot"
            if [ $? == $exitReboot ] ; then
                rebootNeeded=true
            fi
        else
            logMessage "$package can't reinstall - options from previous install not found"
        fi
    fi
}
