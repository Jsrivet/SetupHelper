# ServiceManager for SetupHelper
# contains a functions to install, remove, start and stop a package's service

# managing a normal package's service is straight forward
#
# normally, services are connected via a symbolic link, but to avoid issues with
# updating package files, the service directory is COPIED to the /service directory instead.
#
# If the active copy of the service already exists, the run and log/run files are updated
# ONLY if there are changes. This leaves other files managed by supervise untouched.
#
# For all functions, $1 specifies the package name
#
# functions that begin with _ skip checks and do not log activity


# _killServiceProcesses makes sure there are no service processes running
# The intent is to force supervise to run the new version 
# must be called from other functions that have already made the necessary checks

# starting with v2.80~10, services are stored in this directory which is overlayed onto /service
# all services need to be added there rather than /service
# Note: service calls (eg svc) are still made on /service/...
# there is an unknown interaction between /service and the overlay source
# so code here operates on both directories

victronServicesDir="/opt/victronenergy/service"
if [ -d "$victronServicesDir" ]; then
    serviceDir="$victronServicesDir"
    serviceOverlay=true
else
    serviceDir="/service"
    serviceOverlay=false
fi

_killServiceProcesses ()
{
    local pkg=$1
    ps -lw | grep $pkg | grep -v -e grep -e $$  | awk '{print $3}' | xargs kill > /dev/null 2>&1
}

# startService and stopService start and stop the service, respectively
# the 'down' flag is also cleared/set to control service runs in the future
# startService will cause the service to stop then start again !!!

_startService ()
{
    local pkg=$1
    rm -f "$serviceDir/$pkg/down"
    if $serviceOverlay ; then
        rm -f "/service/$pkg/down"
    fi
    svc -u "/service/$pkg"
    if [ -e "$serviceDir/$pkg/log" ]; then
        rm -f "$serviceDir/$pkg/log/down"
        if $serviceOverlay ; then
            rm -f "/service/$pkg/log/down"
        fi
        svc -u "/service/$pkg/log"
    fi
}

startService ()
{
    # no package specified
    if [ $# -lt 1 ]; then
        return
    fi
    local pkg=$1

    if [ -e "$serviceDir/$pkg" ]; then
        logMessage "starting $pkg service"
        _startService $pkg
    fi
}


_stopService ()
{
    local pkg=$1
    touch "$serviceDir/$pkg/down"
    svc -d "/service/$pkg"
    if [ -e "$serviceDir/$pkg/log" ]; then
        touch "$serviceDir/$pkg/log/down"
        svc -d "/service/$pkg/log"
    fi
    _killServiceProcesses $pkg
}

stopService ()
{
    # no package specified
    if [ $# -lt 1 ]; then
        return
    fi
    local pkg=$1

    if [ -e "$serviceDir/$pkg" ]; then
        logMessage "stopping $pkg service"
        _stopService $pkg
    fi
}

#
# removeService cleanly removes the service
#

_removeService ()
{
    local pkg=$1
    # stop the service
    svc -d "/service/$pkg"

    # remove the active service directory
    # removing the service in the overlayed service directory doesn't remove it from /service
    # so that needs to be removed FIRST
    rm -rf "/service/$pkg"
    if $serviceOverlay ; then
        rm -rf "$serviceDir/$pkg"
    fi
    # kill related processes
    _killServiceProcesses $pkg
}

removeService ()
{
    # no package specified
    if [ $# -lt 1 ]; then
        return
    fi
    local pkg=$1

    if [ -e "$serviceDir/$pkg" ]; then
        logMessage "removing $pkg service"
        _removeService $pkg
    fi
}


# installService adds the service to the /service directory or updates an existing one
#
# If the service does not yet exist, it will start immediately unless 
# it includes the 'down' flag file. This behavior is up to the service writer.
#
# If the service already exists, installService will stop it,
# update the service files and stop all child processes
# Then restart the service unless the down flag is set
#

installService ()
{
    # no package specified
    if [ $# -lt 1 ]; then
        return
    fi
    # no service to install
    if [ ! -e "$scriptDir/service" ]; then
        return
    fi

    local pkg=$1
    local serviceRestartNeeded=false

    if [ -L "$serviceDir/$pkg" ]; then
        logMessage "$pkg removing old service (was symbolic link)"
        _removeService $pkg
    fi
    # service not yet installed, COPY service directory to the active locaiton
    if [ ! -e "$serviceDir/$pkg" ]; then
        logMessage "$pkg installing service"
        cp -R "$scriptDir/service" "$serviceDir/$pkg"
    # service already installed - only copy changed files, then restart service
    else
        logMessage "restarting $pkg service"
        if [ -f "$scriptDir/service/run" ]; then
            cmp -s "$scriptDir/service/run" "$serviceDir/$pkg/run" > /dev/null
            if [ $? != 0 ]; then
                cp "$scriptDir/service/run" "$serviceDir/$pkg/run"
            fi
        fi
        if [ -f "$scriptDir/service/log/run" ]; then
            cmp -s "$scriptDir/service/log/run" "$serviceDir/$pkg/log/run" > /dev/null
            if [ $? != 0 ]; then
                cp "$scriptDir/service/log/run" "$serviceDir/$pkg/log/run"
           fi
        fi
        _killServiceProcesses $pkg
    fi
}



